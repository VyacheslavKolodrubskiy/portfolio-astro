---
import Icon from 'astro-icon'
import { twMerge } from 'tailwind-merge'
import type { HTMLAttributes } from 'astro/types'

type Props = HTMLAttributes<'button'>

const { class: classes, ...rest } = Astro.props as Props

interface link {
  name: string
  href: string
}

const links: link[] = [
  {
    name: 'About',
    href: '#about',
  },
  {
    name: 'Latest works',
    href: '#latest-works',
  },
  {
    name: 'Collaborations',
    href: '#collaborations',
  },
]
---

<button
  type="button"
  aria-label="Burger Menu"
  class:list={twMerge(
    'burger-menu outline-none w-6 h-6 z-50 space-y-1',
    classes
  )}
  class="transition-all"
  {...rest}
>
  {
    Array.from({ length: 2 }).map(() => (
      <div class="burger-menu__line w-full transition-all h-[1px] bg-black" />
    ))
  }
</button>

<nav
  class="nav-menu fixed bg-white text-black z-40 w-full h-full top-0 right-0"
>
  <ul class="flex p-6 flex-col justify-center h-screen">
    {
      links.map((link) => (
        <li class="py-5">
          <a
            class="inline-flex group items-center space-x-8"
            href={link.href}
          >
            <span class="font-medium tracking-tighter leading-none uppercase text-[10vw]">
              {link.name}
            </span>
            <Icon
              class="w-[calc(1rem+5vw)] h-[calc(1rem+5vw)] -rotate-45 group-hover:visible group-hover:translate-x-0 transition-all invisible -translate-x-4"
              name="mdi:arrow-right"
            />
          </a>
        </li>
      ))
    }
  </ul>
</nav>

<script>
  const burgerMenu = document.querySelector('.burger-menu') as HTMLButtonElement
  const navMenu = document.querySelector('.nav-menu') as HTMLUListElement
  const links = document.querySelectorAll(
    '.nav-menu li'
  ) as NodeListOf<HTMLLIElement>

  links.forEach((link) => {
    link.addEventListener('click', closeMenu)
  })

  function handleKeyUp(event: KeyboardEvent) {
    const isMenuOpen = burgerMenu?.classList.contains('burger-menu--open')

    if (isMenuOpen && event.key === 'Escape') closeMenu()
  }

  function toggleMenu() {
    burgerMenu?.classList.toggle('burger-menu--open')
    navMenu?.classList.toggle('nav-menu--open')
  }

  function closeMenu() {
    burgerMenu?.classList.remove('burger-menu--open')
    navMenu?.classList.remove('nav-menu--open')
  }

  document.addEventListener('keyup', handleKeyUp)
  burgerMenu?.addEventListener('click', toggleMenu)
</script>

<style>
  nav {
    transition: all 1s ease;
    clip-path: circle(20px at calc(100% - 16px - 12px) calc(16px + 20px));
  }
  .nav-menu--open {
    visibility: visible;
    clip-path: circle(200% at 100% 0);
  }

  .burger-menu.burger-menu--open > .burger-menu__line {
    background: #000;
  }
  .burger-menu.burger-menu--open > .burger-menu__line:nth-child(1) {
    transform: rotate(45deg) translate(0, 4px);
  }
  .burger-menu.burger-menu--open > .burger-menu__line:nth-child(2) {
    transform: rotate(-45deg) translate(0, -4px);
  }
</style>
